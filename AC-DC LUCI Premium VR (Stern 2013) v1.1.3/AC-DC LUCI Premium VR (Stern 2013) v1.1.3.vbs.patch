--- "./AC-DC LUCI Premium VR (Stern 2013) v1.1.3.vbs.original"	2025-03-07 17:35:13.482481593 -0600
+++ "./AC-DC LUCI Premium VR (Stern 2013) v1.1.3.vbs"	2025-03-07 17:39:36.201868514 -0600
@@ -330,8 +330,8 @@
 
 sub BallSearch() ' check for down drop targets on start (pinmame reset)
 	dim i : for i = 0 to uBound(DTArray) 
-		if DTarray(i)(2).transz <> 0 then ' this seems like not an ideal way to do this
-			Controller.switch(DTarray(i)(3) ) = 1 
+		if DTArray(i).prim.transz <> 0 then ' this seems like not an ideal way to do this
+			Controller.switch(DTArray(i).sw ) = 1
 		end if 
 	Next
 	bstrough.Update
@@ -1016,12 +1016,12 @@
 	BellCage_610h.visible=False
 	Bellk.Kick 0,1, 45
 	Bellk.Enabled = False
-	CageBall.ID = 1000 ' this should stop RollingUpdate from working on the caged ball
+	CageBall.userValue = "CageBall" ' this should stop RollingUpdate from working on the caged ball
 	BellY = Bell.Y
 
 	' ColBall Init
 	Set ColBall = ColBallFreezer.CreateSizedBallWithMass (25, Bell_Mass) ' ball radius must be 25
-	ColBall.ID = 999
+	ColBall.userValue = "ColBall"
 	ColBall.Color = rgb(255,0,255)
 	ColBallFreezer.enabled=1 ' Kicker
 	ColBall.Visible = 0
@@ -1184,7 +1184,7 @@
 
 '/////////////////////////////  BALL COLLISION SOUND  ////////////////////////////
 Sub OnBallBallCollision(ball1, ball2, velocity)
-	if ball1.id = 999 or ball2.id = 999 then ' 1: if bell collision is detected...
+	if ball1.userValue = "ColBall" or ball2.userValue = "ColBall" then ' 1: if bell collision is detected...
 		BellHit = True						 ' 2: Flag BellHit. This will cause the update to copy velocity from ColBall back to the CageBall
 		LastBellHitTime = gametime
 		if (velocity < 3) then exit sub 		' don't spam bell collision sfx?
@@ -1573,18 +1573,17 @@
 	dim b : for each b in getballs
 		if b.y > 2056 then
 			b.velx = 0 : b.vely = 0 : b.velz = 0
-			if b.id < 999 then ' Regular Ball - drop in shooter lane
+			if b.userValue = "CageBall" then ' bell CageBell
+				b.x = Bellk.x
+				b.y = Bellk.y
+				b.z = CageHeight + 30
+			elseif b.userValue = "ColBall" then	' bell ColBall
+				ColBall_Kill()
+			else
 				b.x = 897
 				b.y = 1650
 				b.z = 65
-			elseif b.id = 1000 then ' bell CageBell
-				b.x = BellK.x
-				b.y = BellK.y
-				b.z = CageHeight + 30
-			elseif b.id = 999 then	' bell ColBall
-				ColBall_Kill()
 			end if
-
 		end If
 	Next
 
@@ -3449,6 +3448,39 @@
 '  DROP TARGETS INITIALIZATION
 '******************************************************
 
+Class DropTarget
+  Private m_primary, m_secondary, m_prim, m_sw, m_animate, m_isDropped
+
+  Public Property Get Primary(): Set Primary = m_primary: End Property
+  Public Property Let Primary(input): Set m_primary = input: End Property
+
+  Public Property Get Secondary(): Set Secondary = m_secondary: End Property
+  Public Property Let Secondary(input): Set m_secondary = input: End Property
+
+  Public Property Get Prim(): Set Prim = m_prim: End Property
+  Public Property Let Prim(input): Set m_prim = input: End Property
+
+  Public Property Get Sw(): Sw = m_sw: End Property
+  Public Property Let Sw(input): m_sw = input: End Property
+
+  Public Property Get Animate(): Animate = m_animate: End Property
+  Public Property Let Animate(input): m_animate = input: End Property
+
+  Public Property Get IsDropped(): IsDropped = m_isDropped: End Property
+  Public Property Let IsDropped(input): m_isDropped = input: End Property
+
+  Public default Function init(primary, secondary, prim, sw, animate, isDropped)
+    Set m_primary = primary
+    Set m_secondary = secondary
+    Set m_prim = prim
+    m_sw = sw
+    m_animate = animate
+    m_isDropped = isDropped
+
+    Set Init = Me
+  End Function
+End Class
+
 'Define a variable for each drop target
 Dim DT1, DT2, DT3, DT4, DT5, DT10, DT11, DT12
 
@@ -3468,14 +3500,14 @@
 '
 '	Values for annimate: 1 - bend target (hit to primary), 2 - drop target (hit to secondary), 3 - brick target (high velocity hit to secondary), -1 - raise target 
 
-DT1 = Array(sw1, sw1a, sw1p, 1, 0)
-DT2 = Array(sw2, sw2a, sw2p, 2, 0)
-DT3 = Array(sw3, sw3a, sw3p, 3, 0)
-DT4 = Array(sw4, sw4a, sw4p, 4, 0)
-DT5 = Array(sw5, sw5a, sw5p, 5, 0)
-DT10 = Array(sw10, sw10a, sw10p, 10, 0)
-DT11 = Array(sw11, sw11a, sw11p, 11, 0)
-DT12 = Array(sw12, sw12a, sw12p, 12, 0)
+Set DT1 = (new DropTarget)(sw1, sw1a, sw1p, 1, 0, false)
+Set DT2 = (new DropTarget)(sw2, sw2a, sw2p, 2, 0, false)
+Set DT3 = (new DropTarget)(sw3, sw3a, sw3p, 3, 0, false)
+Set DT4 = (new DropTarget)(sw4, sw4a, sw4p, 4, 0, false)
+Set DT5 = (new DropTarget)(sw5, sw5a, sw5p, 5, 0, false)
+Set DT10 = (new DropTarget)(sw10, sw10a, sw10p, 10, 0, false)
+Set DT11 = (new DropTarget)(sw11, sw11a, sw11p, 11, 0, false)
+Set DT12 = (new DropTarget)(sw12, sw12a, sw12p, 12, 0, false)
 
 
 Dim DTArray
@@ -3508,9 +3540,9 @@
 	i = DTArrayID(switch)
 
 	PlayTargetSound
-	DTArray(i)(4) =  DTCheckBrick(Activeball,DTArray(i)(2))
-	If DTArray(i)(4) = 1 or DTArray(i)(4) = 3 or DTArray(i)(4) = 4 Then
-		DTBallPhysics Activeball, DTArray(i)(2).rotz, DTMass
+	DTArray(i).animate =  DTCheckBrick(Activeball,DTArray(i).prim)
+	If DTArray(i).animate = 1 or DTArray(i).animate = 3 or DTArray(i).animate = 4 Then
+		DTBallPhysics Activeball, DTArray(i).prim.rotz, DTMass
 	End If
 	DoDTAnim
 End Sub
@@ -3519,7 +3551,7 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = -1
+	DTArray(i).animate = -1
 	DoDTAnim
 End Sub
 
@@ -3527,14 +3559,14 @@
 	Dim i
 	i = DTArrayID(switch)
 
-	DTArray(i)(4) = 1
+	DTArray(i).animate = 1
 	DoDTAnim
 End Sub
 
 Function DTArrayID(switch)
 	Dim i
 	For i = 0 to uBound(DTArray) 
-		If DTArray(i)(3) = switch Then DTArrayID = i:Exit Function 
+		If DTArray(i).sw = switch Then DTArrayID = i:Exit Function
 	Next
 End Function
 
@@ -3589,7 +3621,7 @@
 Sub DoDTAnim()
 	Dim i
 	For i=0 to Ubound(DTArray)
-		DTArray(i)(4) = DTAnimate(DTArray(i)(0),DTArray(i)(1),DTArray(i)(2),DTArray(i)(3),DTArray(i)(4))
+		DTArray(i).animate = DTAnimate(DTArray(i).primary,DTArray(i).secondary,DTArray(i).prim,DTArray(i).sw,DTArray(i).animate)
 	Next
 End Sub
 
@@ -5315,17 +5347,23 @@
 
         if deltaX <> 0 then 
             u = (t - KeyX(i)) / deltaX
-        else u = 0 end if
+        else
+            u = 0
+        end if
 
         z1 = (KeyX(i) - KeyX(i-1)) : z2 = (KeyX(i) - KeyX(i-1) )
         if z1 <> 0 and z2 <> 0 then ' check div0
             Keygrad1 = 0.5 * (KeyY(i) - KeyY(i-1)) / z1 + 0.5 * (KeyY(i+1) - KeyY(i) ) / z2
-        else keygrad1 = 0 end if
+        else
+            keygrad1 = 0
+        end if
 
         z1 = (KeyX(i+1) - KeyX(i)) : z2 = (KeyX(i+1) - KeyX(i) )
         if z1 <> 0 and z2 <> 0 then 
             Keygrad2 = 0.5 * (KeyY(i+1) - KeyY(i)) / z1 + 0.5 * (KeyY(i+2) - KeyY(i+1) ) / z2
-        else keygrad2 = 0 end if
+        else
+            keygrad2 = 0
+        end if
 
         if i >= uBound(KeyX)-1 then t = 0 : Lock = Not LoopAnim ' animation is done, reset time to 0
 
